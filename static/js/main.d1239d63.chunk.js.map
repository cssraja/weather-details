{"version":3,"sources":["Reducers/weatherReducer.js","Actions/actionTypes.js","Reducers/index.js","Actions/weatherActions.js","Common/constant.js","Components/WeatherUnitSelector.js","Components/WeatherChart.js","Components/WeatherInfo.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","report","weatherReducer","state","action","type","payload","error","rootReducer","combineReducers","URL","fetchWeatherReportRequest","React","memo","selTempFormat","useState","value","setValue","FormControl","component","className","RadioGroup","aria-label","row","name","onChange","event","target","FormControlLabel","control","Radio","color","label","labelPlacement","chartData","info","data","unit","tempinFahr","tempinCelc","options","chart","series","xaxis","categories","time","width","cardItems","datesList","selectedDate","highlightedDate","setChartData","selDate","setSelDate","useEffect","Object","entries","isSelected","length","listItems","map","item","Card","key","onClick","date","CardContent","Typography","variant","avgFahr","avgCelc","App","weatherDetails","useSelector","setData","currentPage","setCurrentPage","setUnit","setCardItems","setDatesList","dispatch","useDispatch","axios","get","then","response","list","fetchWeatherReportSuccess","catch","errMessage","message","fetchWeatherReportFailure","arr","size","cardItem","reduce","cumm","dt_txt","split","push","Math","ceil","main","temp","toFixed","keys","Array","from","v","i","slice","selCurrentPage","useCallback","cond","Container","maxWidth","Forward","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.d1239d63.chunk.js","sourcesContent":["import  { FETCH_WEATHER_REPORT_REQUEST, FETCH_WEATHER_REPORT_SUCCESS, FETCH_WEATHER_REPORT_FAILURE } from '../Actions/actionTypes'\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    report: []\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case FETCH_WEATHER_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case FETCH_WEATHER_REPORT_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                report: action.payload,\r\n                error: ''\r\n            }\r\n        case FETCH_WEATHER_REPORT_FAILURE:\r\n            return {\r\n                loading: false,\r\n                report: {},\r\n                error: action.payload\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport default weatherReducer","export const FETCH_WEATHER_REPORT_REQUEST = 'FETCH_WEATHER_REPORT_REQUEST'\r\nexport const FETCH_WEATHER_REPORT_SUCCESS = 'FETCH_WEATHER_REPORT_SUCCESS'\r\nexport const FETCH_WEATHER_REPORT_FAILURE  = 'FETCH_WEATHER_REPORT_FAILURE'\r\n","import weatherReducer from './weatherReducer'\n\nimport { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({\n    weatherReducer\n})\n\nexport default rootReducer","import axios from 'axios'\r\nimport * as constants from '../Common/constant'\r\nimport  { FETCH_WEATHER_REPORT_REQUEST, FETCH_WEATHER_REPORT_SUCCESS, FETCH_WEATHER_REPORT_FAILURE } from './actionTypes'\r\n\r\n\r\n\r\nconst URL= `https://api.openweathermap.org/data/2.5/forecast?q=${constants.LOCATION}&APPID=${constants.APPID}&cnt=${constants.COUNT}`\r\n\r\nconst fetchWeatherReportRequest = () => {\r\n    return {\r\n        type: FETCH_WEATHER_REPORT_REQUEST\r\n    }\r\n}\r\n\r\nconst fetchWeatherReportSuccess = (report) => {\r\n    return {\r\n        type: FETCH_WEATHER_REPORT_SUCCESS,\r\n        payload: report\r\n    }\r\n}\r\n\r\nconst fetchWeatherReportFailure = (error) => {\r\n    return {\r\n        type: FETCH_WEATHER_REPORT_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\n\r\nexport const fetchReport = () => {\r\n    return (dispatch) => {\r\n        dispatch(fetchWeatherReportRequest)\r\n        axios.get(URL)\r\n            .then(response => {\r\n                const report = (response.data && response.data.list) ? response.data.list : []\r\n                dispatch(fetchWeatherReportSuccess(report))\r\n            })\r\n            .catch(error => {\r\n                const errMessage = error.message\r\n                dispatch(fetchWeatherReportFailure(errMessage))\r\n            })\r\n    }\r\n\r\n}\r\n\r\n","export const DATE_FORMAT = \"DD-MMM-YYYY\"\r\nexport const HOUR_FORMAT = \"H:00\"\r\nexport const FAHRENHEIT = \"Fahrenheit\"\r\nexport const CELCIUS = \"Celcius\"\r\nexport const DEFAULT_SEL_DATE_INDEX = 0\r\nexport const ITEMS_PER_PAGE = 3\r\nexport const APPID= \"75f972b80e26f14fe6c920aa6a85ad57\"\r\nexport const LOCATION= \"Munich,de\"\r\nexport const COUNT= 40\r\n","import React, { useState } from 'react'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport * as constants from '../Common/constant'\r\n\r\nfunction WeatherUnitSelector({selTempFormat}) {\r\n\r\n    const [value, setValue] = useState(constants.FAHRENHEIT)\r\n\r\n    return (\r\n        <FormControl component=\"fieldset\" className=\"unit-selector\">\r\n            <RadioGroup aria-label=\"position\" row name=\"position\" value={value} onChange={(event) => {\r\n                    setValue(event.target.value);\r\n                    selTempFormat(event.target.value);\r\n                }} >\r\n                <FormControlLabel\r\n                    value= {constants.CELCIUS}\r\n                    control= {<Radio color=\"primary\" />}\r\n                    label= {constants.CELCIUS}\r\n                    labelPlacement= \"end\"\r\n                />\r\n                \r\n                <FormControlLabel\r\n                    value= {constants.FAHRENHEIT}\r\n                    control= {<Radio color=\"primary\" />}\r\n                    label= {constants.FAHRENHEIT}\r\n                    labelPlacement= \"end\"\r\n                />\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default React.memo(WeatherUnitSelector);","import React from 'react'\r\nimport Chart from \"react-apexcharts\";\r\n\r\nfunction WeatherChart(chartData) {\r\n    let info = (chartData.chartData) ? chartData.chartData : {}\r\n    let data = (chartData.unit === 'Fahrenheit') ? info.tempinFahr : info.tempinCelc;\r\n\r\n    let options = {\r\n        chart: {\r\n          type: 'bar'\r\n        },\r\n        series: [{\r\n          name: 'Temp',\r\n          data: (data) ? data : []\r\n        }],\r\n        xaxis: {\r\n          categories: (info && info.time) ? info.time : []\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"row\">\r\n                <div className=\"mixed-chart\">\r\n                    <Chart\r\n                        options={options}\r\n                        series={options.series}\r\n                        type=\"bar\"\r\n                        width=\"100%\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default React.memo(WeatherChart);","import React, { useState, useEffect } from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FiberManualRecordOutlinedIcon from '@material-ui/icons/FiberManualRecordOutlined'\r\nimport WeatherChart from './WeatherChart'\r\nimport * as constants from '../Common/constant'\r\n\r\n\r\nfunction WeatherInfo( {cardItems, datesList, selectedDate, highlightedDate, unit} ) {\r\n    const [chartData, setChartData] = useState([])\r\n    const [selDate, setSelDate] = useState(highlightedDate)\r\n    const defaultSeldateIndex = constants.DEFAULT_SEL_DATE_INDEX\r\n\r\n    useEffect(() => {\r\n        for (let [key, value] of Object.entries(cardItems)) {\r\n            value.isSelected = false;\r\n        }\r\n\r\n        if(cardItems[selDate])\r\n            setChartData(cardItems[selDate])\r\n        \r\n        if(!selDate && datesList.length > 0) {\r\n            setSelDate(datesList[defaultSeldateIndex])\r\n            setChartData(cardItems[datesList[defaultSeldateIndex]])\r\n        }\r\n\t}, [datesList, cardItems, selDate, defaultSeldateIndex])\r\n\r\n    const listItems = datesList.map((item) => {\r\n        \r\n        if(cardItems[item]) {\r\n            return  <Card \r\n                        key={item}\r\n                        onClick={() => {\r\n                            cardItems[item].isSelected = true\r\n                            selectedDate(selDate)\r\n                            setSelDate(item)\r\n                            setChartData(cardItems[item])\r\n                        }}\r\n                        className={(cardItems[item].isSelected || cardItems[item].date === selDate ? 'active' : '') + ' card-size'}\r\n                    >\r\n                        <CardContent >\r\n                            <Typography variant=\"h4\" component=\"h3\">\r\n                                Temp:\r\n                            </Typography>\r\n                            <Typography variant=\"h6\" component=\"h3\">\r\n                                {unit[0] === 'F' ? cardItems[item].avgFahr : cardItems[item].avgCelc } <FiberManualRecordOutlinedIcon className=\"degrees\"/> {unit[0]}\r\n                            </Typography>\r\n                            <Typography variant=\"h4\" component=\"h3\">\r\n                                Date:\r\n                            </Typography>\r\n                            <Typography variant=\"h6\" component=\"h3\">\r\n                                {cardItems[item].date}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n        }\r\n        return ''\r\n     } );\r\n\r\n    return (\r\n        <div>\r\n            {listItems}\r\n            {chartData ? <WeatherChart chartData={chartData} unit={unit} /> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(WeatherInfo);","import React, { useState, useEffect, useCallback } from 'react'\nimport { useDispatch, useSelector } from \"react-redux\"\nimport Container from '@material-ui/core/Container'\nimport { Forward } from '@material-ui/icons'\nimport {fetchReport} from './Actions/weatherActions'\nimport WeatherUnitSelector from './Components/WeatherUnitSelector'\nimport WeatherInfo from './Components/WeatherInfo'\n\nimport * as constants from './Common/constant'\nimport './App.scss';\n\nfunction App() {\n\n\tconst weatherDetails = useSelector(state => state.weatherReducer)\n\tconst [data, setData] = useState({loading: false})\n\tconst [currentPage, setCurrentPage] = useState(1)\n\tconst [unit, setUnit] = useState(constants.FAHRENHEIT)\n\tconst [cardItems, setCardItems] = useState({})\n\tconst [datesList, setDatesList] = useState([])\n\tconst [selDate, setSelDate] = useState('')\n\tconst itemsPerPage = constants.ITEMS_PER_PAGE\n\tconst dispatch = useDispatch()\n\n\tuseEffect(() => {\n        dispatch(fetchReport())\n\t}, [dispatch])\n\n\n\tuseEffect(() => {\n\t\tlet cardItem = weatherDetails.report.reduce((cumm, item) => {\n\t\t\tlet date = (item.dt_txt).split(' ')[0];\n\n\t\t\tif(!cumm) {\n\t\t\t\tcumm = {};\n\t\t\t}\n\t\t\tif(!cumm[date]) {\n\t\t\t\tcumm[date] = {\n\t\t\t\t\tdate: (item.dt_txt).split(' ')[0],\n\t\t\t\t\ttime: [],\n\t\t\t\t\ttempinFahr: [],\n\t\t\t\t\ttempinCelc: [],\n\t\t\t\t\tavgFahr: '',\n\t\t\t\t\tavgCelc: '',\n\t\t\t\t\tisSelected: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif(cumm[date]['date'] === date) {\n\t\t\t\tlet time = (item.dt_txt).split(' ')[1].split(':')[0];\n\t\t\t\ttime = time > 9 ? `${time} PM` :  `${time} AM`\n\t\t\t\tcumm[date]['time'].push(time);\n\t\t\t\tcumm[date]['tempinFahr'].push(Math.ceil(((item.main.temp - 273.15) * 9/5) + 32).toFixed(1));\n\t\t\t\tcumm[date]['tempinCelc'].push(Math.ceil(item.main.temp - 273.15).toFixed(1));\n\t\t\t\tcumm[date]['avgFahr'] = (((((item.main.temp - 273.15) * 9/5) + 32) / cumm[date]['tempinFahr'].length) * cumm[date]['tempinFahr'].length).toFixed(1);\n\t\t\t\tcumm[date]['avgCelc'] = (((item.main.temp - 273.15) / cumm[date]['tempinCelc'].length) * cumm[date]['tempinCelc'].length).toFixed(1);\n\t\t\t}\n\n\t\t\treturn cumm;\n\t\t}, {});\n\t\t\n\t\tconst chunk = (arr, size) =>\n\t\tArray.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n\t\t\tarr.slice(i * size, i * size + size)\n\t\t);\n\n\t\tsetDatesList(chunk(Object.keys(cardItem), itemsPerPage)[currentPage - 1])\n\t\tsetCardItems(cardItem);\n\t\tsetData(weatherDetails);\n\t\t// console.log(Object.keys(cardItem), itemsPerPage)\n\t}, [weatherDetails, currentPage, currentPage, itemsPerPage, selDate])\n\n\n\n\tconst selTempFormat = unit => {\n        setUnit(unit)\n\t};\n\n\tconst selCurrentPage = useCallback(cond => {\n\t\tsetCurrentPage(currentPage + cond)\n\t}, [currentPage]);\n\n\tconst selectedDate = date => {\n        setSelDate(date)\n\t};\n\t\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{\n\t\t\t\tdata.loading ? \n\t\t\t\t\t<div className=\"spinner\"></div> : \n\t\t\t\t\t<Container maxWidth=\"md\" className=\"main-container\">\n\t\t\t\t\t\t<WeatherUnitSelector selTempFormat={selTempFormat}/>\n\t\t\t\t\t\t<div className=\"navigation\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentPage > 1 ? \n\t\t\t\t\t\t\t\t\t<Forward className=\"prev\" onClick={() => selCurrentPage(-1)} /> : ''\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdatesList && datesList.length > -1 && currentPage < datesList.length - 1 ? \n\t\t\t\t\t\t\t\t\t<Forward className=\"next\" onClick={() => selCurrentPage(1)} /> : ''\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdatesList && datesList.length > -1 ? \n\t\t\t\t\t\t\t\t<WeatherInfo cardItems={cardItems} datesList={datesList} selectedDate={selectedDate} highlightedDate={selDate} unit={unit} /> : ''\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t</Container>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './Reducers'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}